<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zeebe.proto

namespace ZeebeClient;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gateway_protocol.SetVariablesRequest</code>
 */
class SetVariablesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * the unique identifier of a particular element; can be the process instance key (as
     * obtained during instance creation), or a given element, such as a service task (see
     * elementInstanceKey on the job message)
     *
     * Generated from protobuf field <code>int64 elementInstanceKey = 1;</code>
     */
    protected $elementInstanceKey = 0;
    /**
     * a JSON serialized document describing variables as key value pairs; the root of the document
     * must be an object
     *
     * Generated from protobuf field <code>string variables = 2;</code>
     */
    protected $variables = '';
    /**
     * if true, the variables will be merged strictly into the local scope (as indicated by
     * elementInstanceKey); this means the variables is not propagated to upper scopes.
     * for example, let's say we have two scopes, '1' and '2', with each having effective variables as:
     * 1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with
     * elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will
     * be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,
     * then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.
     *
     * Generated from protobuf field <code>bool local = 3;</code>
     */
    protected $local = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $elementInstanceKey
     *           the unique identifier of a particular element; can be the process instance key (as
     *           obtained during instance creation), or a given element, such as a service task (see
     *           elementInstanceKey on the job message)
     *     @type string $variables
     *           a JSON serialized document describing variables as key value pairs; the root of the document
     *           must be an object
     *     @type bool $local
     *           if true, the variables will be merged strictly into the local scope (as indicated by
     *           elementInstanceKey); this means the variables is not propagated to upper scopes.
     *           for example, let's say we have two scopes, '1' and '2', with each having effective variables as:
     *           1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with
     *           elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will
     *           be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,
     *           then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.
     * }
     */
    public function __construct($data = NULL) {
        \ZeebeClient\Zeebe::initOnce();
        parent::__construct($data);
    }

    /**
     * the unique identifier of a particular element; can be the process instance key (as
     * obtained during instance creation), or a given element, such as a service task (see
     * elementInstanceKey on the job message)
     *
     * Generated from protobuf field <code>int64 elementInstanceKey = 1;</code>
     * @return int|string
     */
    public function getElementInstanceKey()
    {
        return $this->elementInstanceKey;
    }

    /**
     * the unique identifier of a particular element; can be the process instance key (as
     * obtained during instance creation), or a given element, such as a service task (see
     * elementInstanceKey on the job message)
     *
     * Generated from protobuf field <code>int64 elementInstanceKey = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setElementInstanceKey($var)
    {
        GPBUtil::checkInt64($var);
        $this->elementInstanceKey = $var;

        return $this;
    }

    /**
     * a JSON serialized document describing variables as key value pairs; the root of the document
     * must be an object
     *
     * Generated from protobuf field <code>string variables = 2;</code>
     * @return string
     */
    public function getVariables()
    {
        return $this->variables;
    }

    /**
     * a JSON serialized document describing variables as key value pairs; the root of the document
     * must be an object
     *
     * Generated from protobuf field <code>string variables = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setVariables($var)
    {
        GPBUtil::checkString($var, True);
        $this->variables = $var;

        return $this;
    }

    /**
     * if true, the variables will be merged strictly into the local scope (as indicated by
     * elementInstanceKey); this means the variables is not propagated to upper scopes.
     * for example, let's say we have two scopes, '1' and '2', with each having effective variables as:
     * 1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with
     * elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will
     * be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,
     * then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.
     *
     * Generated from protobuf field <code>bool local = 3;</code>
     * @return bool
     */
    public function getLocal()
    {
        return $this->local;
    }

    /**
     * if true, the variables will be merged strictly into the local scope (as indicated by
     * elementInstanceKey); this means the variables is not propagated to upper scopes.
     * for example, let's say we have two scopes, '1' and '2', with each having effective variables as:
     * 1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with
     * elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will
     * be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,
     * then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.
     *
     * Generated from protobuf field <code>bool local = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setLocal($var)
    {
        GPBUtil::checkBool($var);
        $this->local = $var;

        return $this;
    }

}

